<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.demo.aws</groupId>
	<artifactId>users-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>users-service</name>
	<description>Demo project for Spring Boot microservices with Kafka</description>
	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<artifactId>postgresql</artifactId>
			<groupId>org.postgresql</groupId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<artifactId>springfox-swagger-ui</artifactId>
			<groupId>io.springfox</groupId>
			<version>2.9.2</version>
		</dependency>
		<dependency>
			<artifactId>springfox-swagger-ui</artifactId>
			<groupId>io.springfox</groupId>
			<version>2.9.2</version>
		</dependency>
		<dependency>
			<artifactId>swagger-annotations</artifactId>
			<groupId>io.swagger</groupId>
			<version>1.5.21</version>
		</dependency>
		<dependency>
			<artifactId>swagger-models</artifactId>
			<groupId>io.swagger</groupId>
			<version>1.5.21</version>
		</dependency>

		<dependency>
			<artifactId>springfox-swagger2</artifactId>
			<exclusions>
				<exclusion>
					<artifactId>swagger-annotations</artifactId>
					<groupId>io.swagger</groupId>
				</exclusion>
				<exclusion>
					<artifactId>swagger-models</artifactId>
					<groupId>io.swagger</groupId>
				</exclusion>
			</exclusions>
			<groupId>io.springfox</groupId>
			<version>2.9.2</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/ma.glasnost.orika/orika-core -->
		<dependency>
			<groupId>ma.glasnost.orika</groupId>
			<artifactId>orika-core</artifactId>
			<version>1.5.4</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<!--Remove existing image from local repo-->
<!--					<execution>-->
<!--						<id>docker-clean</id>-->
<!--						<phase>install</phase>-->
<!--						<goals>-->
<!--							<goal>exec</goal>-->
<!--						</goals>-->
<!--						<configuration>-->
<!--							<executable>docker</executable>-->
<!--							<workingDirectory>${project.basedir}</workingDirectory>-->
<!--							<arguments>-->
<!--								<argument>rmi</argument>-->
<!--								<argument>${project.groupId}/${project.artifactId}:${project.version}</argument>-->
<!--							</arguments>-->
<!--						</configuration>-->
<!--					</execution>-->
					<!--Create new docker image using Dockerfile which must be present in current working directory. Tag the image using maven project version information.-->
					<execution>
						<id>docker-build</id>
						<phase>install</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>docker</executable>
							<workingDirectory>${project.basedir}</workingDirectory>
							<arguments>
								<argument>build</argument>
								<argument>-t</argument>
								<argument>${project.groupId}/${project.artifactId}:${project.version}</argument>
								<argument>.</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- Login and Push the image to a docker repo. -->
					<!--					<execution>-->
					<!--						<id>docker-login</id>-->
					<!--						<phase>deploy</phase>-->
					<!--						<goals>-->
					<!--							<goal>exec</goal>-->
					<!--						</goals>-->
					<!--						<configuration>-->
					<!--							<executable>docker</executable>-->
					<!--							<workingDirectory>${project.basedir}</workingDirectory>-->
					<!--							<arguments>-->
					<!--								<argument>login</argument>-->
					<!--								<argument>-u</argument>-->
					<!--								<argument>${docker.user}</argument>-->
					<!--								<argument>-p</argument>-->
					<!--								<argument>${docker.password}</argument>-->
					<!--								<argument>${docker.url}</argument>-->
					<!--							</arguments>-->
					<!--						</configuration>-->
					<!--					</execution>-->
					<!--					<execution>-->
					<!--						<id>docker-push</id>-->
					<!--						<phase>deploy</phase>-->
					<!--						<goals>-->
					<!--							<goal>exec</goal>-->
					<!--						</goals>-->
					<!--						<configuration>-->
					<!--							<executable>docker</executable>-->
					<!--							<workingDirectory>${project.basedir}</workingDirectory>-->
					<!--							<arguments>-->
					<!--								<argument>push</argument>-->
					<!--								<argument>${project.groupId}/${project.artifactId}:${project.version}</argument>-->
					<!--							</arguments>-->
					<!--						</configuration>-->
					<!--					</execution>-->
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
